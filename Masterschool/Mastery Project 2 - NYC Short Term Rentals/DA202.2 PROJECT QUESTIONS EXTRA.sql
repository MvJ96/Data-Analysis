# Question 3 Which borough has the highest average price per month?

SELECT 
borough,
ROUND(AVG(price), 2)
FROM prices
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

# Question 4 How many listings of each room type are in each borough?

SELECT 
p.borough,
rt.room_type,
COUNT(p.listing_id)
FROM prices p
LEFT JOIN room_types rt
ON rt.listing_id = p.listing_id
GROUP BY 1, 2
ORDER BY 1, 2;

# Question 5 How many listings in each room type category have a price of over $500 per night?

SELECT 
rt.room_type,
COUNT(p.listing_id)
FROM prices p
LEFT JOIN room_types rt
ON rt.listing_id = p.listing_id
WHERE p.price > 500
GROUP BY 1;

# Question 6 What is the distribution of listing prices by neighborhood?

SELECT
p.neighbourhood,
COUNT(p.listing_id) AS total_listings,
AVG(p.price) AS avg_price_per_night,
STDDEV(p.price) AS stddev_price_per_night,
MAX(p.price) AS max_price_per_night,
MIN(p.price) AS min_price_per_night
FROM prices p
GROUP BY 1
ORDER BY 5 DESC;

# Question 7 What is the estimated amount of revenue generated by hosts in each borough?

SELECT
p.borough,
SUM(p.price * r.booked_days_365)
FROM prices p
RIGHT JOIN reviews r
ON p.listing_id = r.listing_id
GROUP BY 1;

# Question 8 What is the average price per month for listings in each neighborhood?

SELECT
p.neighbourhood,
AVG(p.price_per_month)
FROM prices p
GROUP BY 1
ORDER BY 2 DESC;

# Question 9 How many listings have no reviews?

SELECT 
COUNT(*)
FROM reviews r
RIGHT JOIN prices p
ON r.listing_id = p.listing_id
WHERE r.number_of_reviews < 1;

# Question 10 How do the estimated book days correlate with the price of an Airbnb listing in New York City?

SELECT
CORR(p.price, r.booked_days_365)
FROM prices p
LEFT JOIN reviews r
ON p.listing_id = r.listing_id

# BONUS QUESTIONS #

# Question 1 What is the average price per room type for listings that have at least 100 reviews and are available more than 200 days a year?

SELECT
rt.room_type,
AVG(p.price)
FROM prices p
LEFT JOIN reviews r
ON p.listing_id = r.listing_id
LEFT JOIN room_types rt
ON p.listing_id = rt.listing_id
WHERE r.number_of_reviews >= 100 AND
r.availability_365 > 200
GROUP BY 1
ORDER BY 2 DESC;

# Question 2 How many hosts have more than one listing, and what's the maximum number of listings by a single host name?

WITH temp AS
    (SELECT
    r.host_name AS hosts,
    COUNT(r.listing_id) AS counts
    FROM reviews r
    GROUP BY 1)
SELECT
COUNT(hosts) AS hosts_morethan_1_listing,
MAX(counts) AS single_host_max_listings
FROM temp
WHERE counts > 1

# Question 3 Determine the top 5 hosts who have the highest price_per_month for their listings, considering only hosts who have at least 10 listings.

WITH temp1 AS
(   SELECT 
    r.host_name AS hn,
    COUNT(r.listing_id) AS counts
    FROM reviews r
    GROUP BY 1),

temp2 AS
(   SELECT
    r.host_name AS hn,
    p.price_per_month AS ppm
    FROM prices p
    RIGHT JOIN reviews r
    ON p.listing_id = r.listing_id)

SELECT *
FROM temp1 AS t1
JOIN temp2 AS t2
ON t1.hn = t2.hn
WHERE t1.counts >= 10
AND t2.ppm IS NOT NULL
ORDER BY t2.ppm DESC
LIMIT 5;


# Question 4 Find the neighborhood(s) that have the highest variance in listing prices.

SELECT
p.neighbourhood,
MAX(p.price) - MIN(p.price) AS variance_listings
FROM prices p
GROUP BY 1
ORDER BY 2 DESC
LIMIT 5;

# Question 5 Calculate the average price_per_month for each neighborhood, 
# 			 taking into account only listings where the host has a minimum_nights 
#		     value that is higher than the average minimum_nights value across all listings.

WITH temp AS 
(   SELECT 
    ROUND(AVG(r.minimum_nights), 2) AS avgs
    FROM reviews r),

temp1 AS
(   SELECT 
    p.neighbourhood,
    p.price_per_month,
    r.minimum_nights
    FROM prices p
    LEFT JOIN reviews r
    ON p.listing_id = r.listing_id)

SELECT
temp1.neighbourhood,
AVG(temp1.price_per_month)
FROM temp, temp1
WHERE temp1.minimum_nights > temp.avgs
GROUP BY temp1.neighbourhood
ORDER BY 2 DESC;